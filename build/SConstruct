#!/usr/bin/env python
from os.path import join


def GetRiveBin(path: str) -> str:
    platform_map = {
        "macos": "macosx",
        "windows": "windows",
    }
    target_map = {
        "template_debug": "debug",
        "template_release": "release",
    }
    return File(
        join(
            "../thirdparty/rive-cpp",
            path.format(
                platform=platform_map.get(env["platform"], env["platform"]),
                target=target_map.get(env["target"], env["target"]),
                suffix=env.get("LIBSUFFIX", ".a"),
            ),
        )
    )


SConscript("SConscript.common")
env = SConscript("../godot-cpp/SConstruct")

env["STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME"] = True

sources = []

# Add skia library
SKIA_SRC_DIR = "../thirdparty/rive-cpp/skia/dependencies/skia"
env.RequireFile(Dir(SKIA_SRC_DIR))
env.Prepend(
    LIBS=["skia"],
    LIBPATH=[join(SKIA_SRC_DIR, "out/Static")],
    CPPPATH=[
        SKIA_SRC_DIR,
        join(SKIA_SRC_DIR, "include"),
        join(SKIA_SRC_DIR, "src"),
    ],
)

# Add rive library

rive_bins = [
    GetRiveBin("build/{platform}/bin/{target}/librive{suffix}"),
    GetRiveBin(
        "skia/renderer/build/{platform}/bin/{target}/librive_skia_renderer{suffix}"
    ),
    GetRiveBin("dependencies/{platform}/cache/bin/{target}/librive_harfbuzz{suffix}"),
    GetRiveBin("dependencies/{platform}/cache/bin/{target}/librive_sheenbidi{suffix}"),
]

for lib in rive_bins:
    env.RequireFile(lib)

RIVE_SRC_DIR = "../thirdparty/rive-cpp/"
env.Prepend(
    LIBS=rive_bins,
    CPPPATH=[
        RIVE_SRC_DIR,
        join(RIVE_SRC_DIR, "include"),
        join(RIVE_SRC_DIR, "src"),
        join(RIVE_SRC_DIR, "skia/renderer"),
        join(RIVE_SRC_DIR, "skia/renderer/include"),
        join(RIVE_SRC_DIR, "skia/renderer/src"),
    ],
)

# Add source files
env.Append(CPPPATH=["../src/"])
sources += env.GlobRecursive("../src", "*.cpp")

if env["platform"] == "macos":
    library = env.SharedLibrary(
        "../demo/bin/librive.{}.{}.framework/librive.{}.{}".format(
            env["platform"], env["target"], env["platform"], env["target"]
        ),
        source=sources,
    )
else:
    library = env.SharedLibrary(
        "../demo/bin/librive{}{}".format(env["suffix"], env["SHLIBSUFFIX"]),
        source=sources,
    )

Default(library)
